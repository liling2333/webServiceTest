package com.web.test;

import java.util.HashMap;
import java.util.Map;

import javax.xml.ws.Endpoint;

import org.apache.cxf.jaxws.EndpointImpl;
import org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.wss4j.dom.handler.WSHandlerConstants;

import com.web.outputService.UserService;
import com.web.outputService.impl.UserServiceImpl;  
  
/** 
 * This class was generated by Apache CXF 2.4.0-SNAPSHOT Tue Oct 26 16:45:43 CST 
 * 2010 Generated source version: 2.4.0-SNAPSHOT 
 *  
 */  
  
public class Server {  
  
    protected Server() throws Exception {  
        System.out.println("Starting Server");  
     /*   Object implementor = new UserServiceImpl();  
        String address = "http://localhost:8080/webServiceTest/webservice/getPersonById?wsdl";  
        EndpointImpl ep = (EndpointImpl) Endpoint.publish(address, implementor);  
        org.apache.cxf.endpoint.Endpoint cxfEp = ep.getServer().getEndpoint();  */
        UserService hw = new UserServiceImpl();
		//发布服务
		EndpointImpl ep = (EndpointImpl)Endpoint.publish("http://localhost:8081/webServiceTest/webservice/getPersonById?wsdl", hw);
		 org.apache.cxf.endpoint.Endpoint cxfEp = ep.getServer().getEndpoint();
		
        Map<String, Object> inProp = new HashMap<String, Object>();  
        inProp.put(WSHandlerConstants.ACTION, WSHandlerConstants.TIMESTAMP  
                + " " + WSHandlerConstants.SIGNATURE + " "  
                + WSHandlerConstants.ENCRYPT);  
        inProp.put(WSHandlerConstants.PW_CALLBACK_CLASS,  
                UTPasswordServerCallBack.class.getName());  
        inProp.put(WSHandlerConstants.SIG_PROP_FILE,  
                "Server_SignVerf.properties");  
        inProp.put(WSHandlerConstants.DEC_PROP_FILE,  
                "Server_Decrypt.properties");  
        cxfEp.getInInterceptors().add(new WSS4JInInterceptor(inProp));  
  
        // /////////////////////////////////////////////////////////////////  
  
        Map<String, Object> outProp = new HashMap<String, Object>();  
        outProp.put(WSHandlerConstants.ACTION, WSHandlerConstants.TIMESTAMP  
                + " " + WSHandlerConstants.SIGNATURE + " "  
                + WSHandlerConstants.ENCRYPT);  
        outProp.put(WSHandlerConstants.USER, "serverprivatekey");  
        outProp.put(WSHandlerConstants.PW_CALLBACK_CLASS,  
                UTPasswordServerCallBack.class.getName());  
        outProp.put(WSHandlerConstants.ENCRYPTION_USER, "clientpublickey");  
        outProp.put(WSHandlerConstants.SIG_PROP_FILE,  
                "Server_Decrypt.properties");// 私钥  
        outProp.put(WSHandlerConstants.ENC_PROP_FILE,  
                "Server_SignVerf.properties");// 公钥  
        cxfEp.getOutInterceptors().add(new WSS4JOutInterceptor(outProp));  
    }  
  
    public static void main(String args[]) throws Exception {  
        new Server();  
        System.out.println("Server ready...");  
  
        Thread.sleep(60 * 60 * 1000);  
        System.out.println("Server exiting");  
        System.exit(0);  
    }  
}  
